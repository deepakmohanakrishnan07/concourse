// Code generated by counterfeiter. DO NOT EDIT.
package accessorfakes

import (
	"sync"

	"github.com/concourse/concourse/atc/api/accessor"
)

type FakeCacher struct {
	DeleteTeamsCacheStub        func()
	deleteTeamsCacheMutex       sync.RWMutex
	deleteTeamsCacheArgsForCall []struct {
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeCacher) DeleteTeamsCache() {
	fake.deleteTeamsCacheMutex.Lock()
	fake.deleteTeamsCacheArgsForCall = append(fake.deleteTeamsCacheArgsForCall, struct {
	}{})
	fake.recordInvocation("DeleteTeamsCache", []interface{}{})
	fake.deleteTeamsCacheMutex.Unlock()
	if fake.DeleteTeamsCacheStub != nil {
		fake.DeleteTeamsCacheStub()
	}
}

func (fake *FakeCacher) DeleteTeamsCacheCallCount() int {
	fake.deleteTeamsCacheMutex.RLock()
	defer fake.deleteTeamsCacheMutex.RUnlock()
	return len(fake.deleteTeamsCacheArgsForCall)
}

func (fake *FakeCacher) DeleteTeamsCacheCalls(stub func()) {
	fake.deleteTeamsCacheMutex.Lock()
	defer fake.deleteTeamsCacheMutex.Unlock()
	fake.DeleteTeamsCacheStub = stub
}

func (fake *FakeCacher) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.deleteTeamsCacheMutex.RLock()
	defer fake.deleteTeamsCacheMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeCacher) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ accessor.Cacher = new(FakeCacher)
