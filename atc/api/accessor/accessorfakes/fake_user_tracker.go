// Code generated by counterfeiter. DO NOT EDIT.
package accessorfakes

import (
	"sync"

	"github.com/concourse/concourse/atc/api/accessor"
)

type FakeUserTracker struct {
	CreateOrUpdateUserStub        func(string, string, string) error
	createOrUpdateUserMutex       sync.RWMutex
	createOrUpdateUserArgsForCall []struct {
		arg1 string
		arg2 string
		arg3 string
	}
	createOrUpdateUserReturns struct {
		result1 error
	}
	createOrUpdateUserReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeUserTracker) CreateOrUpdateUser(arg1 string, arg2 string, arg3 string) error {
	fake.createOrUpdateUserMutex.Lock()
	ret, specificReturn := fake.createOrUpdateUserReturnsOnCall[len(fake.createOrUpdateUserArgsForCall)]
	fake.createOrUpdateUserArgsForCall = append(fake.createOrUpdateUserArgsForCall, struct {
		arg1 string
		arg2 string
		arg3 string
	}{arg1, arg2, arg3})
	fake.recordInvocation("CreateOrUpdateUser", []interface{}{arg1, arg2, arg3})
	fake.createOrUpdateUserMutex.Unlock()
	if fake.CreateOrUpdateUserStub != nil {
		return fake.CreateOrUpdateUserStub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.createOrUpdateUserReturns
	return fakeReturns.result1
}

func (fake *FakeUserTracker) CreateOrUpdateUserCallCount() int {
	fake.createOrUpdateUserMutex.RLock()
	defer fake.createOrUpdateUserMutex.RUnlock()
	return len(fake.createOrUpdateUserArgsForCall)
}

func (fake *FakeUserTracker) CreateOrUpdateUserCalls(stub func(string, string, string) error) {
	fake.createOrUpdateUserMutex.Lock()
	defer fake.createOrUpdateUserMutex.Unlock()
	fake.CreateOrUpdateUserStub = stub
}

func (fake *FakeUserTracker) CreateOrUpdateUserArgsForCall(i int) (string, string, string) {
	fake.createOrUpdateUserMutex.RLock()
	defer fake.createOrUpdateUserMutex.RUnlock()
	argsForCall := fake.createOrUpdateUserArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeUserTracker) CreateOrUpdateUserReturns(result1 error) {
	fake.createOrUpdateUserMutex.Lock()
	defer fake.createOrUpdateUserMutex.Unlock()
	fake.CreateOrUpdateUserStub = nil
	fake.createOrUpdateUserReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeUserTracker) CreateOrUpdateUserReturnsOnCall(i int, result1 error) {
	fake.createOrUpdateUserMutex.Lock()
	defer fake.createOrUpdateUserMutex.Unlock()
	fake.CreateOrUpdateUserStub = nil
	if fake.createOrUpdateUserReturnsOnCall == nil {
		fake.createOrUpdateUserReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.createOrUpdateUserReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeUserTracker) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.createOrUpdateUserMutex.RLock()
	defer fake.createOrUpdateUserMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeUserTracker) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ accessor.UserTracker = new(FakeUserTracker)
